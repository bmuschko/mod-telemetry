input {
  http {
    port => 8080
    codec => line
  }
}

filter {
  # Skip header line
  if [message] =~ /^origin,/ {
    drop { }
  }
  
  # Skip empty lines  
  if [message] =~ /^\s*$/ {
    drop { }
  }
  
  # Parse CSV
  csv {
    separator => ","
    columns => [
      "origin", "path", "branch", "developer", "buildSuccess",
      "buildStartTime", "buildEndTime", "buildId", "buildChangeset",
      "buildDependencyResolutionTimeMs", "buildMavenVersion", "buildGradleVersion", 
      "buildBazelVersion", "buildDotnetVersion", "buildPythonVersion", "buildNodeVersion",
      "buildSourceFileCount", "buildLineCount", "buildParseErrorCount",
      "buildWeight", "buildMaxWeight", "buildMaxWeightSourceFile",
      "buildElapsedTimeMs", "organization"
    ]
  }
  
  # Only process valid records
  if [buildId] {
    # Convert types
    mutate {
      convert => {
        "buildSuccess" => "boolean"
        "buildElapsedTimeMs" => "integer"
        "buildSourceFileCount" => "integer"
        "buildLineCount" => "integer"
      }
    }
    
    # Parse dates
    date {
      match => [ "buildStartTime", "ISO8601" ]
      target => "buildStartTimeParsed"
    }
    
    # Calculate duration
    ruby {
      code => '
        ms = event.get("buildElapsedTimeMs")
        if ms
          event.set("buildDurationSeconds", ms.to_f / 1000)
        end
        
        # Set build status
        success = event.get("buildSuccess")
        if success == true
          event.set("buildStatus", "success")
        elsif success == false
          event.set("buildStatus", "failed")  
        else
          event.set("buildStatus", "unknown")
        end
        
        # Determine build tool
        if event.get("buildGradleVersion") && event.get("buildGradleVersion") != ""
          event.set("primaryBuildTool", "Gradle")
        elsif event.get("buildMavenVersion") && event.get("buildMavenVersion") != ""
          event.set("primaryBuildTool", "Maven")
        else
          event.set("primaryBuildTool", "Unknown")
        end
      '
    }
    
    # Clean up
    mutate {
      remove_field => ["message", "host", "@version"]
    }
  }
}

output {
  stdout { codec => rubydebug }
  
  if [buildId] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "build-metrics-%{+YYYY.MM.dd}"
      document_id => "%{buildId}"
    }
  }
}